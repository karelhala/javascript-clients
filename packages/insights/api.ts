// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Advisor API
 * The API of the Advisor project in Insights
 *
 * OpenAPI spec version: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://cloud.redhat.com/api/insights/v1/cloud.redhat.com/api/insights/v1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 *
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 *
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 *
 * @export
 * @interface Ack
 */
export interface Ack {
    /**
     *
     * @type {string}
     * @memberof Ack
     */
    rule?: string;
}

/**
 *
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     *
     * @type {any}
     * @memberof InlineResponse200
     */
    meta?: any;
    /**
     *
     * @type {InlineResponse200Links}
     * @memberof InlineResponse200
     */
    links?: InlineResponse200Links;
    /**
     *
     * @type {Array<Ack>}
     * @memberof InlineResponse200
     */
    data: Array<Ack>;
}

/**
 *
 * @export
 * @interface InlineResponse2001
 */
export interface InlineResponse2001 {
    /**
     *
     * @type {any}
     * @memberof InlineResponse2001
     */
    meta?: any;
    /**
     *
     * @type {InlineResponse200Links}
     * @memberof InlineResponse2001
     */
    links?: InlineResponse200Links;
    /**
     *
     * @type {Array<RuleForAccount>}
     * @memberof InlineResponse2001
     */
    data: Array<RuleForAccount>;
}

/**
 *
 * @export
 * @interface InlineResponse200Links
 */
export interface InlineResponse200Links {
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Links
     */
    first?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Links
     */
    previous?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Links
     */
    next?: string | null;
    /**
     *
     * @type {string}
     * @memberof InlineResponse200Links
     */
    last?: string | null;
}

/**
 *
 * @export
 * @interface Resolution
 */
export interface Resolution {
    /**
     *
     * @type {number}
     * @memberof Resolution
     */
    systemType: number;
    /**
     *
     * @type {string}
     * @memberof Resolution
     */
    resolution: string;
    /**
     *
     * @type {ResolutionRisk}
     * @memberof Resolution
     */
    resolutionRisk?: ResolutionRisk;
    /**
     *
     * @type {boolean}
     * @memberof Resolution
     */
    hasPlaybook?: boolean;
}

/**
 *
 * @export
 * @interface ResolutionRisk
 */
export interface ResolutionRisk {
    /**
     *
     * @type {string}
     * @memberof ResolutionRisk
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof ResolutionRisk
     */
    risk?: number;
}

/**
 *
 * @export
 * @interface RuleCategory
 */
export interface RuleCategory {
    /**
     *
     * @type {number}
     * @memberof RuleCategory
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof RuleCategory
     */
    name: string;
}

/**
 *
 * @export
 * @interface RuleForAccount
 */
export interface RuleForAccount {
    /**
     * Rule ID from Insights
     * @type {string}
     * @memberof RuleForAccount
     */
    ruleId: string;
    /**
     *
     * @type {Date}
     * @memberof RuleForAccount
     */
    createdAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof RuleForAccount
     */
    updatedAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof RuleForAccount
     */
    deletedAt?: Date;
    /**
     *
     * @type {RuleSet}
     * @memberof RuleForAccount
     */
    ruleset: RuleSet;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    description: string;
    /**
     *
     * @type {boolean}
     * @memberof RuleForAccount
     */
    active?: boolean;
    /**
     *
     * @type {RuleCategory}
     * @memberof RuleForAccount
     */
    category: RuleCategory;
    /**
     *
     * @type {RuleImpact}
     * @memberof RuleForAccount
     */
    impact: RuleImpact;
    /**
     *
     * @type {number}
     * @memberof RuleForAccount
     */
    likelihood?: number;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    nodeId?: string;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    tags?: string;
    /**
     *
     * @type {number}
     * @memberof RuleForAccount
     */
    playbookCount?: number;
    /**
     *
     * @type {boolean}
     * @memberof RuleForAccount
     */
    rebootRequired?: boolean;
    /**
     *
     * @type {Date}
     * @memberof RuleForAccount
     */
    publishDate?: Date | null;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    summary: string;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    generic: string;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    reason: string;
    /**
     *
     * @type {string}
     * @memberof RuleForAccount
     */
    moreInfo?: string;
    /**
     *
     * @type {number}
     * @memberof RuleForAccount
     */
    impactedSystemsCount?: number;
    /**
     *
     * @type {boolean}
     * @memberof RuleForAccount
     */
    reportsShown?: boolean;
    /**
     *
     * @type {Array<Resolution>}
     * @memberof RuleForAccount
     */
    resolutionSet: Array<Resolution>;
    /**
     *
     * @type {number}
     * @memberof RuleForAccount
     */
    totalRisk?: number;
}

/**
 *
 * @export
 * @interface RuleId
 */
export interface RuleId {
    /**
     *
     * @type {string}
     * @memberof RuleId
     */
    ruleId: string;
}

/**
 *
 * @export
 * @interface RuleImpact
 */
export interface RuleImpact {
    /**
     *
     * @type {string}
     * @memberof RuleImpact
     */
    name?: string;
    /**
     *
     * @type {number}
     * @memberof RuleImpact
     */
    impact?: number;
}

/**
 *
 * @export
 * @interface RuleSet
 */
export interface RuleSet {
    /**
     *
     * @type {Date}
     * @memberof RuleSet
     */
    createdAt?: Date;
    /**
     *
     * @type {Date}
     * @memberof RuleSet
     */
    updatedAt?: Date;
    /**
     *
     * @type {string}
     * @memberof RuleSet
     */
    ruleSource: string;
    /**
     *
     * @type {string}
     * @memberof RuleSet
     */
    description: string;
}

/**
 *
 * @export
 * @interface RuleTopic
 */
export interface RuleTopic {
    /**
     *
     * @type {string}
     * @memberof RuleTopic
     */
    name: string;
    /**
     * Rule topic slug
     * @type {string}
     * @memberof RuleTopic
     */
    slug: string;
    /**
     *
     * @type {string}
     * @memberof RuleTopic
     */
    description: string;
    /**
     *
     * @type {string}
     * @memberof RuleTopic
     */
    tags?: string;
}

/**
 *
 * @export
 * @interface RulesStats
 */
export interface RulesStats {
    /**
     *
     * @type {number}
     * @memberof RulesStats
     */
    total: number;
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof RulesStats
     */
    totalRisk: { [key: string]: number; };
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof RulesStats
     */
    category: { [key: string]: number; };
}

/**
 *
 * @export
 * @interface SystemType
 */
export interface SystemType {
    /**
     *
     * @type {number}
     * @memberof SystemType
     */
    id?: number;
    /**
     *
     * @type {string}
     * @memberof SystemType
     */
    role: string;
    /**
     *
     * @type {string}
     * @memberof SystemType
     */
    productCode: string;
}

/**
 *
 * @export
 * @interface SystemsForRule
 */
export interface SystemsForRule {
    /**
     *
     * @type {Array<string>}
     * @memberof SystemsForRule
     */
    hostIds: Array<string>;
}

/**
 *
 * @export
 * @interface SystemsStats
 */
export interface SystemsStats {
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof SystemsStats
     */
    totalRisk: { [key: string]: number; };
    /**
     *
     * @type {{ [key: string]: number; }}
     * @memberof SystemsStats
     */
    category: { [key: string]: number; };
}


/**
 * AckApi - axios parameter creator
 * @export
 */
export const AckApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Add an acknowledgement for a rule, by rule ID, and return the new ack.  If there's already an acknowledgement of this rule by this account, then return that.
         * @param {RuleId} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackCreate(data: RuleId, options: any = {}): RequestArgs {
            // verify required parameter 'data' is not null or undefined
            if (data === null || data === undefined) {
                throw new RequiredError('data','Required parameter data was null or undefined when calling ackCreate.');
            }
            const localVarPath = `/ack/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (data !== undefined) {
                localVarQueryParameter['data'] = data;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete an acknowledgement for a rule, by its rule ID.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackDelete(ruleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling ackDelete.');
            }
            const localVarPath = `/ack/{rule_id}/`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List acks from this account where the rule is active
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackList(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/ack/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This view handles listing, retrieving, creating and deleting acks.  Acks are created and deleted by Insights rule ID, not by their own ack ID.
         * @summary Acks acknowledge (and therefore hide) a rule from view in an account.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackRead(ruleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling ackRead.');
            }
            const localVarPath = `/ack/{rule_id}/`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AckApi - functional programming interface
 * @export
 */
export const AckApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Add an acknowledgement for a rule, by rule ID, and return the new ack.  If there's already an acknowledgement of this rule by this account, then return that.
         * @param {RuleId} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackCreate(data: RuleId, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ack> {
            const localVarAxiosArgs = AckApiAxiosParamCreator(configuration).ackCreate(data, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Delete an acknowledgement for a rule, by its rule ID.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackDelete(ruleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = AckApiAxiosParamCreator(configuration).ackDelete(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List acks from this account where the rule is active
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackList(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200> {
            const localVarAxiosArgs = AckApiAxiosParamCreator(configuration).ackList(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * This view handles listing, retrieving, creating and deleting acks.  Acks are created and deleted by Insights rule ID, not by their own ack ID.
         * @summary Acks acknowledge (and therefore hide) a rule from view in an account.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackRead(ruleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Ack> {
            const localVarAxiosArgs = AckApiAxiosParamCreator(configuration).ackRead(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AckApi - factory interface
 * @export
 */
export const AckApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Add an acknowledgement for a rule, by rule ID, and return the new ack.  If there's already an acknowledgement of this rule by this account, then return that.
         * @param {RuleId} data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackCreate(data: RuleId, options?: any) {
            return AckApiFp(configuration).ackCreate(data, options)(axios, basePath);
        },
        /**
         * Delete an acknowledgement for a rule, by its rule ID.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackDelete(ruleId: string, options?: any) {
            return AckApiFp(configuration).ackDelete(ruleId, options)(axios, basePath);
        },
        /**
         * List acks from this account where the rule is active
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackList(limit?: number, offset?: number, options?: any) {
            return AckApiFp(configuration).ackList(limit, offset, options)(axios, basePath);
        },
        /**
         * This view handles listing, retrieving, creating and deleting acks.  Acks are created and deleted by Insights rule ID, not by their own ack ID.
         * @summary Acks acknowledge (and therefore hide) a rule from view in an account.
         * @param {string} ruleId Rule ID defined by Insights ruleset
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ackRead(ruleId: string, options?: any) {
            return AckApiFp(configuration).ackRead(ruleId, options)(axios, basePath);
        },
    };
};

/**
 * AckApi - object-oriented interface
 * @export
 * @class AckApi
 * @extends {BaseAPI}
 */
export class AckApi extends BaseAPI {
    /**
     * Add an acknowledgement for a rule, by rule ID, and return the new ack.  If there's already an acknowledgement of this rule by this account, then return that.
     * @param {RuleId} data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AckApi
     */
    public ackCreate(data: RuleId, options?: any) {
        return AckApiFp(this.configuration).ackCreate(data, options)(this.axios, this.basePath);
    }

    /**
     * Delete an acknowledgement for a rule, by its rule ID.
     * @param {string} ruleId Rule ID defined by Insights ruleset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AckApi
     */
    public ackDelete(ruleId: string, options?: any) {
        return AckApiFp(this.configuration).ackDelete(ruleId, options)(this.axios, this.basePath);
    }

    /**
     * List acks from this account where the rule is active
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AckApi
     */
    public ackList(limit?: number, offset?: number, options?: any) {
        return AckApiFp(this.configuration).ackList(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * This view handles listing, retrieving, creating and deleting acks.  Acks are created and deleted by Insights rule ID, not by their own ack ID.
     * @summary Acks acknowledge (and therefore hide) a rule from view in an account.
     * @param {string} ruleId Rule ID defined by Insights ruleset
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AckApi
     */
    public ackRead(ruleId: string, options?: any) {
        return AckApiFp(this.configuration).ackRead(ruleId, options)(this.axios, this.basePath);
    }

}

/**
 * RuleApi - axios parameter creator
 * @export
 */
export const RuleApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all active rules for this account.  If 'acked' is False or not given, then only rules that are not acked will be shown.  If acked is set and 'true' as a string or evaluates to a true value, then all rules including those that are acked will be shown.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<1 | 2 | 3 | 4>} [category] Display rules of this category (number)
         * @param {Array<string>} [hasTag] Display rules that have (one or more) tags
         * @param {Array<1 | 2 | 3 | 4>} [impact] Display rules of this impact level (1..4)
         * @param {boolean} [impacting] Display only rules that are impacting systems currently
         * @param {boolean} [incident] Display only rules that cause an incident
         * @param {Array<1 | 2 | 3 | 4>} [likelihood] Display only rules of this likelihood level (1..4)
         * @param {boolean} [reportsShown] Display rules where reports are shown or not
         * @param {Array<1 | 2 | 3 | 4>} [resRisk] Display rules with this resolution risk level (1..4)
         * @param {'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk'} [sort] Order by this field
         * @param {string} [text] Display rules with this text in their text fields
         * @param {string} [topic] Display rules in this topic (slug)
         * @param {Array<1 | 2 | 3 | 4>} [totalRisk] Display rules with this total risk level (1..4)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleList(limit?: number, offset?: number, category?: Array<1 | 2 | 3 | 4>, hasTag?: Array<string>, impact?: Array<1 | 2 | 3 | 4>, impacting?: boolean, incident?: boolean, likelihood?: Array<1 | 2 | 3 | 4>, reportsShown?: boolean, resRisk?: Array<1 | 2 | 3 | 4>, sort?: 'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk', text?: string, topic?: string, totalRisk?: Array<1 | 2 | 3 | 4>, options: any = {}): RequestArgs {
            const localVarPath = `/rule/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (category) {
                localVarQueryParameter['category'] = category;
            }

            if (hasTag) {
                localVarQueryParameter['has_tag'] = hasTag;
            }

            if (impact) {
                localVarQueryParameter['impact'] = impact;
            }

            if (impacting !== undefined) {
                localVarQueryParameter['impacting'] = impacting;
            }

            if (incident !== undefined) {
                localVarQueryParameter['incident'] = incident;
            }

            if (likelihood) {
                localVarQueryParameter['likelihood'] = likelihood;
            }

            if (reportsShown !== undefined) {
                localVarQueryParameter['reports_shown'] = reportsShown;
            }

            if (resRisk) {
                localVarQueryParameter['res_risk'] = resRisk;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (text !== undefined) {
                localVarQueryParameter['text'] = text;
            }

            if (topic !== undefined) {
                localVarQueryParameter['topic'] = topic;
            }

            if (totalRisk) {
                localVarQueryParameter['total_risk'] = totalRisk;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieve a single rule and its associated details.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleRead(ruleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling ruleRead.');
            }
            const localVarPath = `/rule/{rule_id}/`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all systems affected by this rule.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleSystems(ruleId: string, options: any = {}): RequestArgs {
            // verify required parameter 'ruleId' is not null or undefined
            if (ruleId === null || ruleId === undefined) {
                throw new RequiredError('ruleId','Required parameter ruleId was null or undefined when calling ruleSystems.');
            }
            const localVarPath = `/rule/{rule_id}/systems/`
                .replace(`{${"rule_id"}}`, encodeURIComponent(String(ruleId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RuleApi - functional programming interface
 * @export
 */
export const RuleApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List all active rules for this account.  If 'acked' is False or not given, then only rules that are not acked will be shown.  If acked is set and 'true' as a string or evaluates to a true value, then all rules including those that are acked will be shown.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<1 | 2 | 3 | 4>} [category] Display rules of this category (number)
         * @param {Array<string>} [hasTag] Display rules that have (one or more) tags
         * @param {Array<1 | 2 | 3 | 4>} [impact] Display rules of this impact level (1..4)
         * @param {boolean} [impacting] Display only rules that are impacting systems currently
         * @param {boolean} [incident] Display only rules that cause an incident
         * @param {Array<1 | 2 | 3 | 4>} [likelihood] Display only rules of this likelihood level (1..4)
         * @param {boolean} [reportsShown] Display rules where reports are shown or not
         * @param {Array<1 | 2 | 3 | 4>} [resRisk] Display rules with this resolution risk level (1..4)
         * @param {'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk'} [sort] Order by this field
         * @param {string} [text] Display rules with this text in their text fields
         * @param {string} [topic] Display rules in this topic (slug)
         * @param {Array<1 | 2 | 3 | 4>} [totalRisk] Display rules with this total risk level (1..4)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleList(limit?: number, offset?: number, category?: Array<1 | 2 | 3 | 4>, hasTag?: Array<string>, impact?: Array<1 | 2 | 3 | 4>, impacting?: boolean, incident?: boolean, likelihood?: Array<1 | 2 | 3 | 4>, reportsShown?: boolean, resRisk?: Array<1 | 2 | 3 | 4>, sort?: 'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk', text?: string, topic?: string, totalRisk?: Array<1 | 2 | 3 | 4>, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2001> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).ruleList(limit, offset, category, hasTag, impact, impacting, incident, likelihood, reportsShown, resRisk, sort, text, topic, totalRisk, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieve a single rule and its associated details.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleRead(ruleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleForAccount> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).ruleRead(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all systems affected by this rule.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleSystems(ruleId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemsForRule> {
            const localVarAxiosArgs = RuleApiAxiosParamCreator(configuration).ruleSystems(ruleId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RuleApi - factory interface
 * @export
 */
export const RuleApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List all active rules for this account.  If 'acked' is False or not given, then only rules that are not acked will be shown.  If acked is set and 'true' as a string or evaluates to a true value, then all rules including those that are acked will be shown.
         * @param {number} [limit] Number of results to return per page.
         * @param {number} [offset] The initial index from which to return the results.
         * @param {Array<1 | 2 | 3 | 4>} [category] Display rules of this category (number)
         * @param {Array<string>} [hasTag] Display rules that have (one or more) tags
         * @param {Array<1 | 2 | 3 | 4>} [impact] Display rules of this impact level (1..4)
         * @param {boolean} [impacting] Display only rules that are impacting systems currently
         * @param {boolean} [incident] Display only rules that cause an incident
         * @param {Array<1 | 2 | 3 | 4>} [likelihood] Display only rules of this likelihood level (1..4)
         * @param {boolean} [reportsShown] Display rules where reports are shown or not
         * @param {Array<1 | 2 | 3 | 4>} [resRisk] Display rules with this resolution risk level (1..4)
         * @param {'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk'} [sort] Order by this field
         * @param {string} [text] Display rules with this text in their text fields
         * @param {string} [topic] Display rules in this topic (slug)
         * @param {Array<1 | 2 | 3 | 4>} [totalRisk] Display rules with this total risk level (1..4)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleList(limit?: number, offset?: number, category?: Array<1 | 2 | 3 | 4>, hasTag?: Array<string>, impact?: Array<1 | 2 | 3 | 4>, impacting?: boolean, incident?: boolean, likelihood?: Array<1 | 2 | 3 | 4>, reportsShown?: boolean, resRisk?: Array<1 | 2 | 3 | 4>, sort?: 'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk', text?: string, topic?: string, totalRisk?: Array<1 | 2 | 3 | 4>, options?: any) {
            return RuleApiFp(configuration).ruleList(limit, offset, category, hasTag, impact, impacting, incident, likelihood, reportsShown, resRisk, sort, text, topic, totalRisk, options)(axios, basePath);
        },
        /**
         * Retrieve a single rule and its associated details.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleRead(ruleId: string, options?: any) {
            return RuleApiFp(configuration).ruleRead(ruleId, options)(axios, basePath);
        },
        /**
         * List all systems affected by this rule.
         * @param {string} ruleId Rule ID from Insights
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ruleSystems(ruleId: string, options?: any) {
            return RuleApiFp(configuration).ruleSystems(ruleId, options)(axios, basePath);
        },
    };
};

/**
 * RuleApi - object-oriented interface
 * @export
 * @class RuleApi
 * @extends {BaseAPI}
 */
export class RuleApi extends BaseAPI {
    /**
     * List all active rules for this account.  If 'acked' is False or not given, then only rules that are not acked will be shown.  If acked is set and 'true' as a string or evaluates to a true value, then all rules including those that are acked will be shown.
     * @param {number} [limit] Number of results to return per page.
     * @param {number} [offset] The initial index from which to return the results.
     * @param {Array<1 | 2 | 3 | 4>} [category] Display rules of this category (number)
     * @param {Array<string>} [hasTag] Display rules that have (one or more) tags
     * @param {Array<1 | 2 | 3 | 4>} [impact] Display rules of this impact level (1..4)
     * @param {boolean} [impacting] Display only rules that are impacting systems currently
     * @param {boolean} [incident] Display only rules that cause an incident
     * @param {Array<1 | 2 | 3 | 4>} [likelihood] Display only rules of this likelihood level (1..4)
     * @param {boolean} [reportsShown] Display rules where reports are shown or not
     * @param {Array<1 | 2 | 3 | 4>} [resRisk] Display rules with this resolution risk level (1..4)
     * @param {'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk'} [sort] Order by this field
     * @param {string} [text] Display rules with this text in their text fields
     * @param {string} [topic] Display rules in this topic (slug)
     * @param {Array<1 | 2 | 3 | 4>} [totalRisk] Display rules with this total risk level (1..4)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public ruleList(limit?: number, offset?: number, category?: Array<1 | 2 | 3 | 4>, hasTag?: Array<string>, impact?: Array<1 | 2 | 3 | 4>, impacting?: boolean, incident?: boolean, likelihood?: Array<1 | 2 | 3 | 4>, reportsShown?: boolean, resRisk?: Array<1 | 2 | 3 | 4>, sort?: 'category' | 'description' | 'impact' | 'impacted_count' | 'likelihood' | 'playbook_count' | 'publish_date' | 'rule_id' | 'total_risk' | '-category' | '-description' | '-impact' | '-impacted_count' | '-likelihood' | '-playbook_count' | '-publish_date' | '-rule_id' | '-total_risk', text?: string, topic?: string, totalRisk?: Array<1 | 2 | 3 | 4>, options?: any) {
        return RuleApiFp(this.configuration).ruleList(limit, offset, category, hasTag, impact, impacting, incident, likelihood, reportsShown, resRisk, sort, text, topic, totalRisk, options)(this.axios, this.basePath);
    }

    /**
     * Retrieve a single rule and its associated details.
     * @param {string} ruleId Rule ID from Insights
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public ruleRead(ruleId: string, options?: any) {
        return RuleApiFp(this.configuration).ruleRead(ruleId, options)(this.axios, this.basePath);
    }

    /**
     * List all systems affected by this rule.
     * @param {string} ruleId Rule ID from Insights
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RuleApi
     */
    public ruleSystems(ruleId: string, options?: any) {
        return RuleApiFp(this.configuration).ruleSystems(ruleId, options)(this.axios, this.basePath);
    }

}

/**
 * RulecategoryApi - axios parameter creator
 * @export
 */
export const RulecategoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rules are divided into categories, the usual being Availability, Stability, Security and Performance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryList(options: any = {}): RequestArgs {
            const localVarPath = `/rulecategory/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RulecategoryApi - functional programming interface
 * @export
 */
export const RulecategoryApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Rules are divided into categories, the usual being Availability, Stability, Security and Performance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RuleCategory>> {
            const localVarAxiosArgs = RulecategoryApiAxiosParamCreator(configuration).rulecategoryList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RulecategoryApi - factory interface
 * @export
 */
export const RulecategoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Rules are divided into categories, the usual being Availability, Stability, Security and Performance
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rulecategoryList(options?: any) {
            return RulecategoryApiFp(configuration).rulecategoryList(options)(axios, basePath);
        },
    };
};

/**
 * RulecategoryApi - object-oriented interface
 * @export
 * @class RulecategoryApi
 * @extends {BaseAPI}
 */
export class RulecategoryApi extends BaseAPI {
    /**
     * Rules are divided into categories, the usual being Availability, Stability, Security and Performance
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RulecategoryApi
     */
    public rulecategoryList(options?: any) {
        return RulecategoryApiFp(this.configuration).rulecategoryList(options)(this.axios, this.basePath);
    }

}

/**
 * StatsApi - axios parameter creator
 * @export
 */
export const StatsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsReports(options: any = {}): RequestArgs {
            const localVarPath = `/stats/reports/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsRules(options: any = {}): RequestArgs {
            const localVarPath = `/stats/rules/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsSystems(options: any = {}): RequestArgs {
            const localVarPath = `/stats/systems/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StatsApi - functional programming interface
 * @export
 */
export const StatsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsReports(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesStats> {
            const localVarAxiosArgs = StatsApiAxiosParamCreator(configuration).statsReports(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsRules(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RulesStats> {
            const localVarAxiosArgs = StatsApiAxiosParamCreator(configuration).statsRules(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsSystems(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemsStats> {
            const localVarAxiosArgs = StatsApiAxiosParamCreator(configuration).statsSystems(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StatsApi - factory interface
 * @export
 */
export const StatsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsReports(options?: any) {
            return StatsApiFp(configuration).statsReports(options)(axios, basePath);
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsRules(options?: any) {
            return StatsApiFp(configuration).statsRules(options)(axios, basePath);
        },
        /**
         * View the statistics for this account.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statsSystems(options?: any) {
            return StatsApiFp(configuration).statsSystems(options)(axios, basePath);
        },
    };
};

/**
 * StatsApi - object-oriented interface
 * @export
 * @class StatsApi
 * @extends {BaseAPI}
 */
export class StatsApi extends BaseAPI {
    /**
     * View the statistics for this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsReports(options?: any) {
        return StatsApiFp(this.configuration).statsReports(options)(this.axios, this.basePath);
    }

    /**
     * View the statistics for this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsRules(options?: any) {
        return StatsApiFp(this.configuration).statsRules(options)(this.axios, this.basePath);
    }

    /**
     * View the statistics for this account.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StatsApi
     */
    public statsSystems(options?: any) {
        return StatsApiFp(this.configuration).statsSystems(options)(this.axios, this.basePath);
    }

}

/**
 * SystemApi - axios parameter creator
 * @export
 */
export const SystemApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Returns the list of latest reports for an Inventory Host ID that:  * are in the user's account  * have an active, not-deleted rule  * where the rule has not been acked by this account  If the host ID is not found, return an empty list.
         * @param {string} uuid The system&#39;s Host ID in the Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemReports(uuid: string, options: any = {}): RequestArgs {
            // verify required parameter 'uuid' is not null or undefined
            if (uuid === null || uuid === undefined) {
                throw new RequiredError('uuid','Required parameter uuid was null or undefined when calling systemReports.');
            }
            const localVarPath = `/system/{uuid}/reports/`
                .replace(`{${"uuid"}}`, encodeURIComponent(String(uuid)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemApi - functional programming interface
 * @export
 */
export const SystemApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Returns the list of latest reports for an Inventory Host ID that:  * are in the user's account  * have an active, not-deleted rule  * where the rule has not been acked by this account  If the host ID is not found, return an empty list.
         * @param {string} uuid The system&#39;s Host ID in the Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemReports(uuid: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = SystemApiAxiosParamCreator(configuration).systemReports(uuid, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemApi - factory interface
 * @export
 */
export const SystemApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Returns the list of latest reports for an Inventory Host ID that:  * are in the user's account  * have an active, not-deleted rule  * where the rule has not been acked by this account  If the host ID is not found, return an empty list.
         * @param {string} uuid The system&#39;s Host ID in the Inventory
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemReports(uuid: string, options?: any) {
            return SystemApiFp(configuration).systemReports(uuid, options)(axios, basePath);
        },
    };
};

/**
 * SystemApi - object-oriented interface
 * @export
 * @class SystemApi
 * @extends {BaseAPI}
 */
export class SystemApi extends BaseAPI {
    /**
     * Returns the list of latest reports for an Inventory Host ID that:  * are in the user's account  * have an active, not-deleted rule  * where the rule has not been acked by this account  If the host ID is not found, return an empty list.
     * @param {string} uuid The system&#39;s Host ID in the Inventory
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemApi
     */
    public systemReports(uuid: string, options?: any) {
        return SystemApiFp(this.configuration).systemReports(uuid, options)(this.axios, this.basePath);
    }

}

/**
 * SystemtypeApi - axios parameter creator
 * @export
 */
export const SystemtypeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeList(options: any = {}): RequestArgs {
            const localVarPath = `/systemtype/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Display a single system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeRead(id: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling systemtypeRead.');
            }
            const localVarPath = `/systemtype/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SystemtypeApi - functional programming interface
 * @export
 */
export const SystemtypeApiFp = function(configuration?: Configuration) {
    return {
        /**
         * List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SystemType>> {
            const localVarAxiosArgs = SystemtypeApiAxiosParamCreator(configuration).systemtypeList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Display a single system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeRead(id: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemType> {
            const localVarAxiosArgs = SystemtypeApiAxiosParamCreator(configuration).systemtypeRead(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SystemtypeApi - factory interface
 * @export
 */
export const SystemtypeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * List all system types
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeList(options?: any) {
            return SystemtypeApiFp(configuration).systemtypeList(options)(axios, basePath);
        },
        /**
         * Display a single system type
         * @param {number} id A unique integer value identifying this system type.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        systemtypeRead(id: number, options?: any) {
            return SystemtypeApiFp(configuration).systemtypeRead(id, options)(axios, basePath);
        },
    };
};

/**
 * SystemtypeApi - object-oriented interface
 * @export
 * @class SystemtypeApi
 * @extends {BaseAPI}
 */
export class SystemtypeApi extends BaseAPI {
    /**
     * List all system types
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemtypeApi
     */
    public systemtypeList(options?: any) {
        return SystemtypeApiFp(this.configuration).systemtypeList(options)(this.axios, this.basePath);
    }

    /**
     * Display a single system type
     * @param {number} id A unique integer value identifying this system type.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SystemtypeApi
     */
    public systemtypeRead(id: number, options?: any) {
        return SystemtypeApiFp(this.configuration).systemtypeRead(id, options)(this.axios, this.basePath);
    }

}

/**
 * TopicApi - axios parameter creator
 * @export
 */
export const TopicApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicList(options: any = {}): RequestArgs {
            const localVarPath = `/topic/`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicRead(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling topicRead.');
            }
            const localVarPath = `/topic/{slug}/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List all systems affected by this rule topic.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicSystems(slug: string, options: any = {}): RequestArgs {
            // verify required parameter 'slug' is not null or undefined
            if (slug === null || slug === undefined) {
                throw new RequiredError('slug','Required parameter slug was null or undefined when calling topicSystems.');
            }
            const localVarPath = `/topic/{slug}/systems/`
                .replace(`{${"slug"}}`, encodeURIComponent(String(slug)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TopicApi - functional programming interface
 * @export
 */
export const TopicApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicList(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<RuleTopic>> {
            const localVarAxiosArgs = TopicApiAxiosParamCreator(configuration).topicList(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicRead(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<RuleTopic> {
            const localVarAxiosArgs = TopicApiAxiosParamCreator(configuration).topicRead(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * List all systems affected by this rule topic.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicSystems(slug: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemsForRule> {
            const localVarAxiosArgs = TopicApiAxiosParamCreator(configuration).topicSystems(slug, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TopicApi - factory interface
 * @export
 */
export const TopicApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicList(options?: any) {
            return TopicApiFp(configuration).topicList(options)(axios, basePath);
        },
        /**
         * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicRead(slug: string, options?: any) {
            return TopicApiFp(configuration).topicRead(slug, options)(axios, basePath);
        },
        /**
         * List all systems affected by this rule topic.
         * @param {string} slug Rule topic slug
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        topicSystems(slug: string, options?: any) {
            return TopicApiFp(configuration).topicSystems(slug, options)(axios, basePath);
        },
    };
};

/**
 * TopicApi - object-oriented interface
 * @export
 * @class TopicApi
 * @extends {BaseAPI}
 */
export class TopicApi extends BaseAPI {
    /**
     * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicList(options?: any) {
        return TopicApiFp(this.configuration).topicList(options)(this.axios, this.basePath);
    }

    /**
     * Rules have topics, set by Insights administrators.  This is a view of the topics available, along with the rules and systems to which they apply.
     * @param {string} slug Rule topic slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicRead(slug: string, options?: any) {
        return TopicApiFp(this.configuration).topicRead(slug, options)(this.axios, this.basePath);
    }

    /**
     * List all systems affected by this rule topic.
     * @param {string} slug Rule topic slug
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TopicApi
     */
    public topicSystems(slug: string, options?: any) {
        return TopicApiFp(this.configuration).topicSystems(slug, options)(this.axios, this.basePath);
    }

}

