// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Sources
 * Sources
 *
 * OpenAPI spec version: 0.1.0
 * Contact: support@redhat.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "https://cloud.redhat.com//api/sources/v0.1".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface Application
 */
export interface Application {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    applicationTypeId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Application
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    id?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Application
     */
    sourceId?: string;
    /**
     * 
     * @type {Date}
     * @memberof Application
     */
    updatedAt?: Date;
}

/**
 * 
 * @export
 * @interface ApplicationType
 */
export interface ApplicationType {
    /**
     * 
     * @type {Date}
     * @memberof ApplicationType
     */
    createdAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    displayName?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof ApplicationType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof ApplicationType
     */
    name?: string;
    /**
     * 
     * @type {Date}
     * @memberof ApplicationType
     */
    updatedAt?: Date;
}

/**
 * 
 * @export
 * @interface ApplicationTypesCollection
 */
export interface ApplicationTypesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof ApplicationTypesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof ApplicationTypesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<ApplicationType>}
     * @memberof ApplicationTypesCollection
     */
    data?: Array<ApplicationType>;
}

/**
 * 
 * @export
 * @interface ApplicationsCollection
 */
export interface ApplicationsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof ApplicationsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof ApplicationsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Application>}
     * @memberof ApplicationsCollection
     */
    data?: Array<Application>;
}

/**
 * 
 * @export
 * @interface Authentication
 */
export interface Authentication {
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    authtype?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Authentication
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    password?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Authentication
     */
    resourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    resourceType?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    status?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    statusDetails?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Authentication
     */
    username?: string;
}

/**
 * 
 * @export
 * @interface AuthenticationsCollection
 */
export interface AuthenticationsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof AuthenticationsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof AuthenticationsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Authentication>}
     * @memberof AuthenticationsCollection
     */
    data?: Array<Authentication>;
}

/**
 * 
 * @export
 * @interface CollectionLinks
 */
export interface CollectionLinks {
    /**
     * 
     * @type {string}
     * @memberof CollectionLinks
     */
    first?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLinks
     */
    last?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLinks
     */
    prev?: string;
    /**
     * 
     * @type {string}
     * @memberof CollectionLinks
     */
    next?: string;
}

/**
 * 
 * @export
 * @interface CollectionMetadata
 */
export interface CollectionMetadata {
    /**
     * 
     * @type {number}
     * @memberof CollectionMetadata
     */
    count?: number;
}

/**
 * 
 * @export
 * @interface Endpoint
 */
export interface Endpoint {
    /**
     * Optional X.509 Certificate Authority
     * @type {string}
     * @memberof Endpoint
     */
    certificateAuthority?: string;
    /**
     * 
     * @type {Date}
     * @memberof Endpoint
     */
    createdAt?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Endpoint
     */
    _default?: boolean;
    /**
     * URI host component
     * @type {string}
     * @memberof Endpoint
     */
    host?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Endpoint
     */
    id?: string;
    /**
     * URI path component
     * @type {string}
     * @memberof Endpoint
     */
    path?: string;
    /**
     * URI port component
     * @type {number}
     * @memberof Endpoint
     */
    port?: number;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    role?: string;
    /**
     * URI scheme component
     * @type {string}
     * @memberof Endpoint
     */
    scheme?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Endpoint
     */
    sourceId?: string;
    /**
     * 
     * @type {string}
     * @memberof Endpoint
     */
    tenant?: string;
    /**
     * 
     * @type {Date}
     * @memberof Endpoint
     */
    updatedAt?: Date;
    /**
     * Should SSL be verified
     * @type {boolean}
     * @memberof Endpoint
     */
    verifySsl?: boolean;
}

/**
 * 
 * @export
 * @interface EndpointsCollection
 */
export interface EndpointsCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof EndpointsCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof EndpointsCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Endpoint>}
     * @memberof EndpointsCollection
     */
    data?: Array<Endpoint>;
}

/**
 * 
 * @export
 * @interface OrderParameters
 */
export interface OrderParameters {
    /**
     * JSON object with provisioning parameters
     * @type {any}
     * @memberof OrderParameters
     */
    serviceParameters?: any;
    /**
     * The provider specific parameters needed to provision this service. This might include namespaces, special keys
     * @type {any}
     * @memberof OrderParameters
     */
    providerControlParameters?: any;
}

/**
 * 
 * @export
 * @interface Source
 */
export interface Source {
    /**
     * 
     * @type {Date}
     * @memberof Source
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    name?: string;
    /**
     * ID of the resource
     * @type {string}
     * @memberof Source
     */
    sourceTypeId?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    tenant?: string;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    uid?: string;
    /**
     * 
     * @type {Date}
     * @memberof Source
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof Source
     */
    version?: string;
}

/**
 * 
 * @export
 * @interface SourceType
 */
export interface SourceType {
    /**
     * 
     * @type {Date}
     * @memberof SourceType
     */
    createdAt?: Date;
    /**
     * ID of the resource
     * @type {string}
     * @memberof SourceType
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    productName?: string;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    schema?: string;
    /**
     * 
     * @type {Date}
     * @memberof SourceType
     */
    updatedAt?: Date;
    /**
     * 
     * @type {string}
     * @memberof SourceType
     */
    vendor?: string;
}

/**
 * 
 * @export
 * @interface SourceTypesCollection
 */
export interface SourceTypesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof SourceTypesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof SourceTypesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<SourceType>}
     * @memberof SourceTypesCollection
     */
    data?: Array<SourceType>;
}

/**
 * 
 * @export
 * @interface SourcesCollection
 */
export interface SourcesCollection {
    /**
     * 
     * @type {CollectionMetadata}
     * @memberof SourcesCollection
     */
    meta?: CollectionMetadata;
    /**
     * 
     * @type {CollectionLinks}
     * @memberof SourcesCollection
     */
    links?: CollectionLinks;
    /**
     * 
     * @type {Array<Source>}
     * @memberof SourcesCollection
     */
    data?: Array<Source>;
}

/**
 * 
 * @export
 * @interface Tagging
 */
export interface Tagging {
    /**
     * ID of the resource
     * @type {string}
     * @memberof Tagging
     */
    tagId?: string;
    /**
     * 
     * @type {string}
     * @memberof Tagging
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Tagging
     */
    value?: string;
}

/**
 * 
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof Tenant
     */
    externalTenant?: string;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(application: Application, options: any = {}): RequestArgs {
            // verify required parameter 'application' is not null or undefined
            if (application === null || application === undefined) {
                throw new RequiredError('application','Required parameter application was null or undefined when calling createApplication.');
            }
            const localVarPath = `/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Application" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(application || {}) : (application || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthentication(authentication: Authentication, options: any = {}): RequestArgs {
            // verify required parameter 'authentication' is not null or undefined
            if (authentication === null || authentication === undefined) {
                throw new RequiredError('authentication','Required parameter authentication was null or undefined when calling createAuthentication.');
            }
            const localVarPath = `/authentications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Authentication" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authentication || {}) : (authentication || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndpoint(endpoint: Endpoint, options: any = {}): RequestArgs {
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling createEndpoint.');
            }
            const localVarPath = `/endpoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Endpoint" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(endpoint || {}) : (endpoint || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(source: Source, options: any = {}): RequestArgs {
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling createSource.');
            }
            const localVarPath = `/sources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Source" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(source || {}) : (source || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Creates a SourceType object
         * @summary Create a new SourceType
         * @param {SourceType} sourceType SourceType attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSourceType(sourceType: SourceType, options: any = {}): RequestArgs {
            // verify required parameter 'sourceType' is not null or undefined
            if (sourceType === null || sourceType === undefined) {
                throw new RequiredError('sourceType','Required parameter sourceType was null or undefined when calling createSourceType.');
            }
            const localVarPath = `/source_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'POST' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"SourceType" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(sourceType || {}) : (sourceType || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteApplication.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthentication(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEndpoint(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'DELETE' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options: any = {}): RequestArgs {
            const localVarPath = `/openapi.json`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of ApplicationType objects
         * @summary List ApplicationTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypes(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/application_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/applications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthentications(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/authentications`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointAuthentications(id: string, limit?: number, offset?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listEndpointAuthentications.');
            }
            const localVarPath = `/endpoints/{id}/authentications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/endpoints`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplications(id: string, limit?: number, offset?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceApplications.');
            }
            const localVarPath = `/sources/{id}/applications`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceEndpoints(id: string, limit?: number, offset?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceEndpoints.');
            }
            const localVarPath = `/sources/{id}/endpoints`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypeSources(id: string, limit?: number, offset?: number, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling listSourceTypeSources.');
            }
            const localVarPath = `/source_types/{id}/sources`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of SourceType objects
         * @summary List SourceTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypes(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/source_types`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, options: any = {}): RequestArgs {
            const localVarPath = `/sources`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplication(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showApplication.');
            }
            const localVarPath = `/applications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplicationType(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showApplicationType.');
            }
            const localVarPath = `/application_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAuthentication(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEndpoint(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceType(id: string, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling showSourceType.');
            }
            const localVarPath = `/source_types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthentication(id: string, authentication: Authentication, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateAuthentication.');
            }
            // verify required parameter 'authentication' is not null or undefined
            if (authentication === null || authentication === undefined) {
                throw new RequiredError('authentication','Required parameter authentication was null or undefined when calling updateAuthentication.');
            }
            const localVarPath = `/authentications/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Authentication" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(authentication || {}) : (authentication || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint(id: string, endpoint: Endpoint, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateEndpoint.');
            }
            // verify required parameter 'endpoint' is not null or undefined
            if (endpoint === null || endpoint === undefined) {
                throw new RequiredError('endpoint','Required parameter endpoint was null or undefined when calling updateEndpoint.');
            }
            const localVarPath = `/endpoints/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Endpoint" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(endpoint || {}) : (endpoint || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(id: string, source: Source, options: any = {}): RequestArgs {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling updateSource.');
            }
            // verify required parameter 'source' is not null or undefined
            if (source === null || source === undefined) {
                throw new RequiredError('source','Required parameter source was null or undefined when calling updateSource.');
            }
            const localVarPath = `/sources/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication UserSecurity required
            // http basic authentication required
            if (configuration && (configuration.username || configuration.password)) {
                localVarHeaderParameter["Authorization"] = "Basic " + btoa(configuration.username + ":" + configuration.password);
            }

            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"Source" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(source || {}) : (source || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(application: Application, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Application>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createApplication(application, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthentication(authentication: Authentication, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Authentication>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createAuthentication(authentication, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndpoint(endpoint: Endpoint, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Endpoint>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createEndpoint(endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(source: Source, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Source>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createSource(source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Creates a SourceType object
         * @summary Create a new SourceType
         * @param {SourceType} sourceType SourceType attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSourceType(sourceType: SourceType, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SourceType>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createSourceType(sourceType, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteApplication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthentication(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteAuthentication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEndpoint(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteEndpoint(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).deleteSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getDocumentation(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of ApplicationType objects
         * @summary List ApplicationTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypes(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationTypesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listApplicationTypes(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listApplications(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthentications(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listAuthentications(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointAuthentications(id: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthenticationsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEndpointAuthentications(id, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listEndpoints(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplications(id: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceApplications(id, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceEndpoints(id: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<EndpointsCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceEndpoints(id, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypeSources(id: string, limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceTypeSources(id, limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of SourceType objects
         * @summary List SourceTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypes(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceTypesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSourceTypes(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourcesCollection> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).listSources(limit, offset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplication(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Application> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showApplication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplicationType(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApplicationType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showApplicationType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAuthentication(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Authentication> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showAuthentication(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEndpoint(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Endpoint> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showEndpoint(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Source> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSource(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceType(id: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SourceType> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).showSourceType(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthentication(id: string, authentication: Authentication, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateAuthentication(id, authentication, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint(id: string, endpoint: Endpoint, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateEndpoint(id, endpoint, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(id: string, source: Source, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateSource(id, source, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Creates a Application object
         * @summary Create a new Application
         * @param {Application} application Application attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createApplication(application: Application, options?: any) {
            return DefaultApiFp(configuration).createApplication(application, options)(axios, basePath);
        },
        /**
         * Creates a Authentication object
         * @summary Create a new Authentication
         * @param {Authentication} authentication Authentication attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthentication(authentication: Authentication, options?: any) {
            return DefaultApiFp(configuration).createAuthentication(authentication, options)(axios, basePath);
        },
        /**
         * Creates a Endpoint object
         * @summary Create a new Endpoint
         * @param {Endpoint} endpoint Endpoint attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createEndpoint(endpoint: Endpoint, options?: any) {
            return DefaultApiFp(configuration).createEndpoint(endpoint, options)(axios, basePath);
        },
        /**
         * Creates a Source object
         * @summary Create a new Source
         * @param {Source} source Source attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSource(source: Source, options?: any) {
            return DefaultApiFp(configuration).createSource(source, options)(axios, basePath);
        },
        /**
         * Creates a SourceType object
         * @summary Create a new SourceType
         * @param {SourceType} sourceType SourceType attributes to create
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSourceType(sourceType: SourceType, options?: any) {
            return DefaultApiFp(configuration).createSourceType(sourceType, options)(axios, basePath);
        },
        /**
         * Deletes a Application object
         * @summary Delete an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteApplication(id: string, options?: any) {
            return DefaultApiFp(configuration).deleteApplication(id, options)(axios, basePath);
        },
        /**
         * Deletes a Authentication object
         * @summary Delete an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteAuthentication(id: string, options?: any) {
            return DefaultApiFp(configuration).deleteAuthentication(id, options)(axios, basePath);
        },
        /**
         * Deletes a Endpoint object
         * @summary Delete an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteEndpoint(id: string, options?: any) {
            return DefaultApiFp(configuration).deleteEndpoint(id, options)(axios, basePath);
        },
        /**
         * Deletes a Source object
         * @summary Delete an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSource(id: string, options?: any) {
            return DefaultApiFp(configuration).deleteSource(id, options)(axios, basePath);
        },
        /**
         * 
         * @summary Return this API document in JSON format
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDocumentation(options?: any) {
            return DefaultApiFp(configuration).getDocumentation(options)(axios, basePath);
        },
        /**
         * Returns an array of ApplicationType objects
         * @summary List ApplicationTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplicationTypes(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listApplicationTypes(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listApplications(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listApplications(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listAuthentications(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listAuthentications(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Authentication objects
         * @summary List Authentications for Endpoint
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpointAuthentications(id: string, limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listEndpointAuthentications(id, limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listEndpoints(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listEndpoints(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Application objects
         * @summary List Applications for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceApplications(id: string, limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listSourceApplications(id, limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Endpoint objects
         * @summary List Endpoints for Source
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceEndpoints(id: string, limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listSourceEndpoints(id, limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources for SourceType
         * @param {string} id ID of the resource
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypeSources(id: string, limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listSourceTypeSources(id, limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of SourceType objects
         * @summary List SourceTypes
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSourceTypes(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listSourceTypes(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns an array of Source objects
         * @summary List Sources
         * @param {number} [limit] The numbers of items to return per page.
         * @param {number} [offset] The number of items to skip before starting to collect the result set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSources(limit?: number, offset?: number, options?: any) {
            return DefaultApiFp(configuration).listSources(limit, offset, options)(axios, basePath);
        },
        /**
         * Returns a Application object
         * @summary Show an existing Application
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplication(id: string, options?: any) {
            return DefaultApiFp(configuration).showApplication(id, options)(axios, basePath);
        },
        /**
         * Returns a ApplicationType object
         * @summary Show an existing ApplicationType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showApplicationType(id: string, options?: any) {
            return DefaultApiFp(configuration).showApplicationType(id, options)(axios, basePath);
        },
        /**
         * Returns a Authentication object
         * @summary Show an existing Authentication
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showAuthentication(id: string, options?: any) {
            return DefaultApiFp(configuration).showAuthentication(id, options)(axios, basePath);
        },
        /**
         * Returns a Endpoint object
         * @summary Show an existing Endpoint
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showEndpoint(id: string, options?: any) {
            return DefaultApiFp(configuration).showEndpoint(id, options)(axios, basePath);
        },
        /**
         * Returns a Source object
         * @summary Show an existing Source
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSource(id: string, options?: any) {
            return DefaultApiFp(configuration).showSource(id, options)(axios, basePath);
        },
        /**
         * Returns a SourceType object
         * @summary Show an existing SourceType
         * @param {string} id ID of the resource
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showSourceType(id: string, options?: any) {
            return DefaultApiFp(configuration).showSourceType(id, options)(axios, basePath);
        },
        /**
         * Updates a Authentication object
         * @summary Update an existing Authentication
         * @param {string} id ID of the resource
         * @param {Authentication} authentication Authentication attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateAuthentication(id: string, authentication: Authentication, options?: any) {
            return DefaultApiFp(configuration).updateAuthentication(id, authentication, options)(axios, basePath);
        },
        /**
         * Updates a Endpoint object
         * @summary Update an existing Endpoint
         * @param {string} id ID of the resource
         * @param {Endpoint} endpoint Endpoint attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateEndpoint(id: string, endpoint: Endpoint, options?: any) {
            return DefaultApiFp(configuration).updateEndpoint(id, endpoint, options)(axios, basePath);
        },
        /**
         * Updates a Source object
         * @summary Update an existing Source
         * @param {string} id ID of the resource
         * @param {Source} source Source attributes to update
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSource(id: string, source: Source, options?: any) {
            return DefaultApiFp(configuration).updateSource(id, source, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Creates a Application object
     * @summary Create a new Application
     * @param {Application} application Application attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createApplication(application: Application, options?: any) {
        return DefaultApiFp(this.configuration).createApplication(application, options)(this.axios, this.basePath);
    }

    /**
     * Creates a Authentication object
     * @summary Create a new Authentication
     * @param {Authentication} authentication Authentication attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createAuthentication(authentication: Authentication, options?: any) {
        return DefaultApiFp(this.configuration).createAuthentication(authentication, options)(this.axios, this.basePath);
    }

    /**
     * Creates a Endpoint object
     * @summary Create a new Endpoint
     * @param {Endpoint} endpoint Endpoint attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createEndpoint(endpoint: Endpoint, options?: any) {
        return DefaultApiFp(this.configuration).createEndpoint(endpoint, options)(this.axios, this.basePath);
    }

    /**
     * Creates a Source object
     * @summary Create a new Source
     * @param {Source} source Source attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSource(source: Source, options?: any) {
        return DefaultApiFp(this.configuration).createSource(source, options)(this.axios, this.basePath);
    }

    /**
     * Creates a SourceType object
     * @summary Create a new SourceType
     * @param {SourceType} sourceType SourceType attributes to create
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createSourceType(sourceType: SourceType, options?: any) {
        return DefaultApiFp(this.configuration).createSourceType(sourceType, options)(this.axios, this.basePath);
    }

    /**
     * Deletes a Application object
     * @summary Delete an existing Application
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteApplication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteApplication(id, options)(this.axios, this.basePath);
    }

    /**
     * Deletes a Authentication object
     * @summary Delete an existing Authentication
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteAuthentication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteAuthentication(id, options)(this.axios, this.basePath);
    }

    /**
     * Deletes a Endpoint object
     * @summary Delete an existing Endpoint
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteEndpoint(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteEndpoint(id, options)(this.axios, this.basePath);
    }

    /**
     * Deletes a Source object
     * @summary Delete an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteSource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).deleteSource(id, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Return this API document in JSON format
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getDocumentation(options?: any) {
        return DefaultApiFp(this.configuration).getDocumentation(options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of ApplicationType objects
     * @summary List ApplicationTypes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApplicationTypes(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listApplicationTypes(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Application objects
     * @summary List Applications
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listApplications(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listApplications(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Authentication objects
     * @summary List Authentications
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listAuthentications(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listAuthentications(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Authentication objects
     * @summary List Authentications for Endpoint
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEndpointAuthentications(id: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEndpointAuthentications(id, limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Endpoint objects
     * @summary List Endpoints
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listEndpoints(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listEndpoints(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Application objects
     * @summary List Applications for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceApplications(id: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSourceApplications(id, limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Endpoint objects
     * @summary List Endpoints for Source
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceEndpoints(id: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSourceEndpoints(id, limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Source objects
     * @summary List Sources for SourceType
     * @param {string} id ID of the resource
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceTypeSources(id: string, limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSourceTypeSources(id, limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of SourceType objects
     * @summary List SourceTypes
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSourceTypes(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSourceTypes(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns an array of Source objects
     * @summary List Sources
     * @param {number} [limit] The numbers of items to return per page.
     * @param {number} [offset] The number of items to skip before starting to collect the result set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listSources(limit?: number, offset?: number, options?: any) {
        return DefaultApiFp(this.configuration).listSources(limit, offset, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Application object
     * @summary Show an existing Application
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showApplication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showApplication(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a ApplicationType object
     * @summary Show an existing ApplicationType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showApplicationType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showApplicationType(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Authentication object
     * @summary Show an existing Authentication
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showAuthentication(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showAuthentication(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Endpoint object
     * @summary Show an existing Endpoint
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showEndpoint(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showEndpoint(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a Source object
     * @summary Show an existing Source
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSource(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSource(id, options)(this.axios, this.basePath);
    }

    /**
     * Returns a SourceType object
     * @summary Show an existing SourceType
     * @param {string} id ID of the resource
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public showSourceType(id: string, options?: any) {
        return DefaultApiFp(this.configuration).showSourceType(id, options)(this.axios, this.basePath);
    }

    /**
     * Updates a Authentication object
     * @summary Update an existing Authentication
     * @param {string} id ID of the resource
     * @param {Authentication} authentication Authentication attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateAuthentication(id: string, authentication: Authentication, options?: any) {
        return DefaultApiFp(this.configuration).updateAuthentication(id, authentication, options)(this.axios, this.basePath);
    }

    /**
     * Updates a Endpoint object
     * @summary Update an existing Endpoint
     * @param {string} id ID of the resource
     * @param {Endpoint} endpoint Endpoint attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateEndpoint(id: string, endpoint: Endpoint, options?: any) {
        return DefaultApiFp(this.configuration).updateEndpoint(id, endpoint, options)(this.axios, this.basePath);
    }

    /**
     * Updates a Source object
     * @summary Update an existing Source
     * @param {string} id ID of the resource
     * @param {Source} source Source attributes to update
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateSource(id: string, source: Source, options?: any) {
        return DefaultApiFp(this.configuration).updateSource(id, source, options)(this.axios, this.basePath);
    }

}

