// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Vulnerability Engine Manager
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import { Configuration } from "./configuration";
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';

const BASE_PATH = "http://localhost".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *  
 * @export
 * @interface RequestArgs
 */
export interface RequestArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface AffectedSystemsOut
 */
export interface AffectedSystemsOut {
    /**
     * 
     * @type {AffectedSystemsOutData}
     * @memberof AffectedSystemsOut
     */
    data: AffectedSystemsOutData;
    /**
     * 
     * @type {Links}
     * @memberof AffectedSystemsOut
     */
    links: Links;
    /**
     * 
     * @type {Meta}
     * @memberof AffectedSystemsOut
     */
    meta: Meta;
}

/**
 * 
 * @export
 * @interface AffectedSystemsOutData
 */
export interface AffectedSystemsOutData {
    /**
     * Host id.
     * @type {string}
     * @memberof AffectedSystemsOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof AffectedSystemsOutData
     */
    type: string;
    /**
     * 
     * @type {AffectedSystemsOutDataAttributes}
     * @memberof AffectedSystemsOutData
     */
    attributes: AffectedSystemsOutDataAttributes;
}

/**
 * 
 * @export
 * @interface AffectedSystemsOutDataAttributes
 */
export interface AffectedSystemsOutDataAttributes {
    /**
     * Host ID.
     * @type {string}
     * @memberof AffectedSystemsOutDataAttributes
     */
    inventoryId: string;
    /**
     * Date of last evaluation.
     * @type {string}
     * @memberof AffectedSystemsOutDataAttributes
     */
    lastEvaluation: string;
    /**
     * Whether the host is managed by Satellite or not.
     * @type {boolean}
     * @memberof AffectedSystemsOutDataAttributes
     */
    satelliteManaged: boolean;
    /**
     * Status of the vulnerability for the application's point of view.
     * @type {string}
     * @memberof AffectedSystemsOutDataAttributes
     */
    status?: string;
    /**
     * Internal ID of the vulnerability status.
     * @type {number}
     * @memberof AffectedSystemsOutDataAttributes
     */
    statusId: number;
}

/**
 * 
 * @export
 * @interface CveDetailOut
 */
export interface CveDetailOut {
    /**
     * 
     * @type {CveDetailOutData}
     * @memberof CveDetailOut
     */
    data?: CveDetailOutData;
}

/**
 * 
 * @export
 * @interface CveDetailOutData
 */
export interface CveDetailOutData {
    /**
     * CVE id.
     * @type {string}
     * @memberof CveDetailOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof CveDetailOutData
     */
    type: string;
    /**
     * 
     * @type {CveDetailOutDataAttributes}
     * @memberof CveDetailOutData
     */
    attributes: CveDetailOutDataAttributes;
}

/**
 * 
 * @export
 * @interface CveDetailOutDataAttributes
 */
export interface CveDetailOutDataAttributes {
    /**
     * cvss2 metrics of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss2Metrics: string;
    /**
     * String representation of cvss2 score of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss2Score: string;
    /**
     * cvss3 metrics of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss3Metrics: string;
    /**
     * String representation of cvss3 score of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    cvss3Score: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    cweList: Array<string>;
    /**
     * Description of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    description: string;
    /**
     * List of Red Hat erratas fixing the CVE.
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    errataList: Array<string>;
    /**
     * String representation of ISO-8601 formatted date of last modification of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    modifiedDate: string;
    /**
     * Red Hat security impact of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    impact: string;
    /**
     * List of packages where the fix for the CVE appeared.
     * @type {Array<string>}
     * @memberof CveDetailOutDataAttributes
     */
    packageList: Array<string>;
    /**
     * String representation of ISO-8601 formatted date of first public disclosure of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    publicDate: string;
    /**
     * Additional resource about the CVE, provided by Red Hat.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    redhatUrl: string;
    /**
     * Additional resources about the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    secondaryUrl: string;
    /**
     * Synopsis of the CVE.
     * @type {string}
     * @memberof CveDetailOutDataAttributes
     */
    synopsis: string;
}

/**
 * 
 * @export
 * @interface Errors
 */
export interface Errors {
    /**
     * 
     * @type {Array<ErrorsErrors>}
     * @memberof Errors
     */
    errors?: Array<ErrorsErrors>;
}

/**
 * 
 * @export
 * @interface ErrorsErrors
 */
export interface ErrorsErrors {
    /**
     * Error detail.
     * @type {string}
     * @memberof ErrorsErrors
     */
    detail: string;
    /**
     * String representation of HTTP status code.
     * @type {string}
     * @memberof ErrorsErrors
     */
    status: string;
}

/**
 * 
 * @export
 * @interface Links
 */
export interface Links {
    /**
     * Link to first page.
     * @type {string}
     * @memberof Links
     */
    first: string;
    /**
     * Link to last page.
     * @type {string}
     * @memberof Links
     */
    last: string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof Links
     */
    next: string;
    /**
     * Link to next page.
     * @type {string}
     * @memberof Links
     */
    previous: string;
}

/**
 * 
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * Full text filter
     * @type {string}
     * @memberof Meta
     */
    filter: string;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof Meta
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof Meta
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof Meta
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof Meta
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof Meta
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof Meta
     */
    sort: string;
    /**
     * Total number of records.
     * @type {number}
     * @memberof Meta
     */
    totalItems: number;
}

/**
 * 
 * @export
 * @interface MetaSystems
 */
export interface MetaSystems {
    /**
     * Full text filter
     * @type {string}
     * @memberof MetaSystems
     */
    filter: string;
    /**
     * Maximum number of paginated results.
     * @type {number}
     * @memberof MetaSystems
     */
    limit: number;
    /**
     * First record of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    offset: number;
    /**
     * Page number of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    page: number;
    /**
     * Number of records per page of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    pageSize: number;
    /**
     * Total number of pages of paginated response.
     * @type {number}
     * @memberof MetaSystems
     */
    pages: number;
    /**
     * Sorting filter.
     * @type {string}
     * @memberof MetaSystems
     */
    sort: string;
    /**
     * Total number of records.
     * @type {number}
     * @memberof MetaSystems
     */
    totalItems: number;
    /**
     * Whether the filter to show opted out systems is active or not. If not set, defaults to hiding opted out systems.
     * @type {boolean}
     * @memberof MetaSystems
     */
    optOut: boolean;
}

/**
 * 
 * @export
 * @interface StatusIn
 */
export interface StatusIn {
    /**
     * Host ID.
     * @type {string}
     * @memberof StatusIn
     */
    inventoryId: string;
    /**
     * CVE name.
     * @type {string}
     * @memberof StatusIn
     */
    cve: string;
    /**
     * Status ID to be set, obtained by GET method.
     * @type {number}
     * @memberof StatusIn
     */
    statusId: number;
}

/**
 * 
 * @export
 * @interface StatusListOut
 */
export interface StatusListOut {
    /**
     * List of available status/status_id pairs.
     * @type {Array<StatusListOutData>}
     * @memberof StatusListOut
     */
    data: Array<StatusListOutData>;
    /**
     * 
     * @type {StatusListOutMeta}
     * @memberof StatusListOut
     */
    meta: StatusListOutMeta;
}

/**
 * 
 * @export
 * @interface StatusListOutData
 */
export interface StatusListOutData {
    /**
     * Internal status_id.
     * @type {number}
     * @memberof StatusListOutData
     */
    id: number;
    /**
     * Represenation of internal status_id.
     * @type {string}
     * @memberof StatusListOutData
     */
    name: string;
}

/**
 * 
 * @export
 * @interface StatusListOutMeta
 */
export interface StatusListOutMeta {
    /**
     * Total number of available status/status_id pairs.
     * @type {number}
     * @memberof StatusListOutMeta
     */
    totalItems: number;
}

/**
 * 
 * @export
 * @interface SystemCvesOut
 */
export interface SystemCvesOut {
    /**
     * 
     * @type {SystemCvesOutData}
     * @memberof SystemCvesOut
     */
    data: SystemCvesOutData;
    /**
     * 
     * @type {Links}
     * @memberof SystemCvesOut
     */
    links: Links;
    /**
     * 
     * @type {Meta}
     * @memberof SystemCvesOut
     */
    meta: Meta;
}

/**
 * 
 * @export
 * @interface SystemCvesOutData
 */
export interface SystemCvesOutData {
    /**
     * CVE id.
     * @type {string}
     * @memberof SystemCvesOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof SystemCvesOutData
     */
    type: string;
    /**
     * 
     * @type {SystemCvesOutDataAttributes}
     * @memberof SystemCvesOutData
     */
    attributes: SystemCvesOutDataAttributes;
}

/**
 * 
 * @export
 * @interface SystemCvesOutDataAttributes
 */
export interface SystemCvesOutDataAttributes {
    /**
     * String representation of cvss2 score of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    cvss2Score: string;
    /**
     * String representation of cvss3 score of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    cvss3Score: string;
    /**
     * Description of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    description: string;
    /**
     * Red Hat security impact of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    impact: string;
    /**
     * String representation of ISO-8601 formatted date of first public disclosure of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    publicDate: string;
    /**
     * Status of the vulnerability for the application's point of view.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    status: string;
    /**
     * Internal ID of the vulnerability status.
     * @type {number}
     * @memberof SystemCvesOutDataAttributes
     */
    statusId: number;
    /**
     * Synopsis of the CVE.
     * @type {string}
     * @memberof SystemCvesOutDataAttributes
     */
    synopsis: string;
}

/**
 * 
 * @export
 * @interface SystemListOut
 */
export interface SystemListOut {
    /**
     * 
     * @type {SystemListOutData}
     * @memberof SystemListOut
     */
    data: SystemListOutData;
    /**
     * 
     * @type {Links}
     * @memberof SystemListOut
     */
    links: Links;
    /**
     * 
     * @type {MetaSystems}
     * @memberof SystemListOut
     */
    meta: MetaSystems;
}

/**
 * 
 * @export
 * @interface SystemListOutData
 */
export interface SystemListOutData {
    /**
     * Host ID.
     * @type {string}
     * @memberof SystemListOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof SystemListOutData
     */
    type: string;
    /**
     * 
     * @type {SystemListOutDataAttributes}
     * @memberof SystemListOutData
     */
    attributes: SystemListOutDataAttributes;
}

/**
 * 
 * @export
 * @interface SystemListOutDataAttributes
 */
export interface SystemListOutDataAttributes {
    /**
     * Number of CVE exposures for the system.
     * @type {number}
     * @memberof SystemListOutDataAttributes
     */
    cveCount: number;
    /**
     * Host ID.
     * @type {string}
     * @memberof SystemListOutDataAttributes
     */
    inventoryId: string;
    /**
     * Date of last evaluation.
     * @type {string}
     * @memberof SystemListOutDataAttributes
     */
    lastEvaluation: string;
    /**
     * Opt out status of the system.
     * @type {boolean}
     * @memberof SystemListOutDataAttributes
     */
    optOut: boolean;
    /**
     * Whether the host is managed by Satellite or not.
     * @type {boolean}
     * @memberof SystemListOutDataAttributes
     */
    satelliteManaged: boolean;
}

/**
 * 
 * @export
 * @interface VulnerabilitiesOut
 */
export interface VulnerabilitiesOut {
    /**
     * 
     * @type {VulnerabilitiesOutData}
     * @memberof VulnerabilitiesOut
     */
    data: VulnerabilitiesOutData;
    /**
     * 
     * @type {Links}
     * @memberof VulnerabilitiesOut
     */
    links: Links;
    /**
     * 
     * @type {Meta}
     * @memberof VulnerabilitiesOut
     */
    meta: Meta;
}

/**
 * 
 * @export
 * @interface VulnerabilitiesOutData
 */
export interface VulnerabilitiesOutData {
    /**
     * CVE id.
     * @type {string}
     * @memberof VulnerabilitiesOutData
     */
    id: string;
    /**
     * Type of the record.
     * @type {string}
     * @memberof VulnerabilitiesOutData
     */
    type: string;
    /**
     * 
     * @type {VulnerabilitiesOutDataAttributes}
     * @memberof VulnerabilitiesOutData
     */
    attributes: VulnerabilitiesOutDataAttributes;
}

/**
 * 
 * @export
 * @interface VulnerabilitiesOutDataAttributes
 */
export interface VulnerabilitiesOutDataAttributes {
    /**
     * String representation of cvss2 score of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    cvss2Score: string;
    /**
     * String representation of cvss3 score of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    cvss3Score: string;
    /**
     * Description of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    description: string;
    /**
     * Red Hat security impact of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    impact: string;
    /**
     * String representation of ISO-8601 formatted date of first public disclosure of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    publicDate: string;
    /**
     * Synopsis of the CVE.
     * @type {string}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    synopsis: string;
    /**
     * Number of systems affected by the CVE.
     * @type {number}
     * @memberof VulnerabilitiesOutDataAttributes
     */
    systemsAffected: number;
}


/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdAffectedSystemsGet(cveId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling v1CvesCveIdAffectedSystemsGet.');
            }
            const localVarPath = `/v1/cves/{cve_id}/affected_systems`
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdGet(cveId: string, options: any = {}): RequestArgs {
            // verify required parameter 'cveId' is not null or undefined
            if (cveId === null || cveId === undefined) {
                throw new RequiredError('cveId','Required parameter cveId was null or undefined when calling v1CvesCveIdGet.');
            }
            const localVarPath = `/v1/cves/{cve_id}`
                .replace(`{${"cve_id"}}`, encodeURIComponent(String(cveId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusGet(options: any = {}): RequestArgs {
            const localVarPath = `/v1/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusPatch(statusIn: StatusIn, options: any = {}): RequestArgs {
            // verify required parameter 'statusIn' is not null or undefined
            if (statusIn === null || statusIn === undefined) {
                throw new RequiredError('statusIn','Required parameter statusIn was null or undefined when calling v1StatusPatch.');
            }
            const localVarPath = `/v1/status`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            localVarHeaderParameter['Content-Type'] = 'application/vnd.api+json';

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);
            const needsSerialization = (<any>"StatusIn" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(statusIn || {}) : (statusIn || "");

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, optOut?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/v1/systems`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (optOut !== undefined) {
                localVarQueryParameter['opt_out'] = optOut;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdCvesGet(inventoryId: string, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling v1SystemsInventoryIdCvesGet.');
            }
            const localVarPath = `/v1/systems/{inventory_id}/cves`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdOptOutPatch(inventoryId: string, value: boolean, options: any = {}): RequestArgs {
            // verify required parameter 'inventoryId' is not null or undefined
            if (inventoryId === null || inventoryId === undefined) {
                throw new RequiredError('inventoryId','Required parameter inventoryId was null or undefined when calling v1SystemsInventoryIdOptOutPatch.');
            }
            // verify required parameter 'value' is not null or undefined
            if (value === null || value === undefined) {
                throw new RequiredError('value','Required parameter value was null or undefined when calling v1SystemsInventoryIdOptOutPatch.');
            }
            const localVarPath = `/v1/systems/{inventory_id}/opt_out`
                .replace(`{${"inventory_id"}}`, encodeURIComponent(String(inventoryId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'PATCH' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (value !== undefined) {
                localVarQueryParameter['value'] = value;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VulnerabilitiesCvesGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, showAll?: boolean, options: any = {}): RequestArgs {
            const localVarPath = `/v1/vulnerabilities/cves`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
					? configuration.apiKey("x-rh-identity")
					: configuration.apiKey;
                localVarHeaderParameter["x-rh-identity"] = localVarApiKeyValue;
            }

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['page_size'] = pageSize;
            }

            if (sort !== undefined) {
                localVarQueryParameter['sort'] = sort;
            }

            if (showAll !== undefined) {
                localVarQueryParameter['show_all'] = showAll;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdAffectedSystemsGet(cveId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<AffectedSystemsOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1CvesCveIdAffectedSystemsGet(cveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdGet(cveId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<CveDetailOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1CvesCveIdGet(cveId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusGet(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<StatusListOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1StatusGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusPatch(statusIn: StatusIn, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1StatusPatch(statusIn, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, optOut?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemListOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1SystemsGet(filter, limit, offset, page, pageSize, sort, optOut, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdCvesGet(inventoryId: string, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<SystemCvesOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1SystemsInventoryIdCvesGet(inventoryId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdOptOutPatch(inventoryId: string, value: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Response> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1SystemsInventoryIdOptOutPatch(inventoryId, value, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VulnerabilitiesCvesGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, showAll?: boolean, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<VulnerabilitiesOut> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).v1VulnerabilitiesCvesGet(filter, limit, offset, page, pageSize, sort, showAll, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = Object.assign(localVarAxiosArgs.options, {url: basePath + localVarAxiosArgs.url})
                return axios.request(axiosRequestArgs);                
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Report of affected systems for a given CVE.
         * @summary Affected systems for a given CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdAffectedSystemsGet(cveId: string, options?: any) {
            return DefaultApiFp(configuration).v1CvesCveIdAffectedSystemsGet(cveId, options)(axios, basePath);
        },
        /**
         * Show all information about given CVE.
         * @summary Details of a CVE.
         * @param {string} cveId CVE id
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1CvesCveIdGet(cveId: string, options?: any) {
            return DefaultApiFp(configuration).v1CvesCveIdGet(cveId, options)(axios, basePath);
        },
        /**
         * Returns available status and status_id pairs where status_id is internal ID of the status.
         * @summary Available status/status_id pairs.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusGet(options?: any) {
            return DefaultApiFp(configuration).v1StatusGet(options)(axios, basePath);
        },
        /**
         * Sets status for given host and CVE.
         * @summary Set status for system vulnerability.
         * @param {StatusIn} statusIn Values to be set.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1StatusPatch(statusIn: StatusIn, options?: any) {
            return DefaultApiFp(configuration).v1StatusPatch(statusIn, options)(axios, basePath);
        },
        /**
         * List systems visible to logged in account with basic information related to vulnerabilities.
         * @summary List systems.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, optOut?: boolean, options?: any) {
            return DefaultApiFp(configuration).v1SystemsGet(filter, limit, offset, page, pageSize, sort, optOut, options)(axios, basePath);
        },
        /**
         * Shows detailed infomation about all CVEs the system is exposed to.
         * @summary CVE report for a system.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdCvesGet(inventoryId: string, options?: any) {
            return DefaultApiFp(configuration).v1SystemsInventoryIdCvesGet(inventoryId, options)(axios, basePath);
        },
        /**
         * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
         * @summary Opt in/out a system to/from vulnerability application.
         * @param {string} inventoryId Inventory ID of the host to be opted in/out.
         * @param {boolean} value opt_out setting of the host.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1SystemsInventoryIdOptOutPatch(inventoryId: string, value: boolean, options?: any) {
            return DefaultApiFp(configuration).v1SystemsInventoryIdOptOutPatch(inventoryId, value, options)(axios, basePath);
        },
        /**
         * Overview of vulnerabilities across whole host inventory.
         * @summary Vulnerabilities overview.
         * @param {string} [filter] Full text filter.
         * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
         * @param {string} [sort] Sorting used for response.
         * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1VulnerabilitiesCvesGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, showAll?: boolean, options?: any) {
            return DefaultApiFp(configuration).v1VulnerabilitiesCvesGet(filter, limit, offset, page, pageSize, sort, showAll, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Report of affected systems for a given CVE.
     * @summary Affected systems for a given CVE.
     * @param {string} cveId CVE id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1CvesCveIdAffectedSystemsGet(cveId: string, options?: any) {
        return DefaultApiFp(this.configuration).v1CvesCveIdAffectedSystemsGet(cveId, options)(this.axios, this.basePath);
    }

    /**
     * Show all information about given CVE.
     * @summary Details of a CVE.
     * @param {string} cveId CVE id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1CvesCveIdGet(cveId: string, options?: any) {
        return DefaultApiFp(this.configuration).v1CvesCveIdGet(cveId, options)(this.axios, this.basePath);
    }

    /**
     * Returns available status and status_id pairs where status_id is internal ID of the status.
     * @summary Available status/status_id pairs.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1StatusGet(options?: any) {
        return DefaultApiFp(this.configuration).v1StatusGet(options)(this.axios, this.basePath);
    }

    /**
     * Sets status for given host and CVE.
     * @summary Set status for system vulnerability.
     * @param {StatusIn} statusIn Values to be set.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1StatusPatch(statusIn: StatusIn, options?: any) {
        return DefaultApiFp(this.configuration).v1StatusPatch(statusIn, options)(this.axios, this.basePath);
    }

    /**
     * List systems visible to logged in account with basic information related to vulnerabilities.
     * @summary List systems.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {boolean} [optOut] If set to true, shows systems which have been opted out from vulnerability application. If not set defaults to false.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1SystemsGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, optOut?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).v1SystemsGet(filter, limit, offset, page, pageSize, sort, optOut, options)(this.axios, this.basePath);
    }

    /**
     * Shows detailed infomation about all CVEs the system is exposed to.
     * @summary CVE report for a system.
     * @param {string} inventoryId Inventory ID of the host to be opted in/out.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1SystemsInventoryIdCvesGet(inventoryId: string, options?: any) {
        return DefaultApiFp(this.configuration).v1SystemsInventoryIdCvesGet(inventoryId, options)(this.axios, this.basePath);
    }

    /**
     * Opts in/out a systems. Opted out system is not shown and manageable by the vulnerability application.
     * @summary Opt in/out a system to/from vulnerability application.
     * @param {string} inventoryId Inventory ID of the host to be opted in/out.
     * @param {boolean} value opt_out setting of the host.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1SystemsInventoryIdOptOutPatch(inventoryId: string, value: boolean, options?: any) {
        return DefaultApiFp(this.configuration).v1SystemsInventoryIdOptOutPatch(inventoryId, value, options)(this.axios, this.basePath);
    }

    /**
     * Overview of vulnerabilities across whole host inventory.
     * @summary Vulnerabilities overview.
     * @param {string} [filter] Full text filter.
     * @param {number} [limit] Maximum number of records per page. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [offset] Offset of first record of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [page] Page number of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {number} [pageSize] Page size of paginated response. Limit/Offset pagination wins over page/page_size pagination.
     * @param {string} [sort] Sorting used for response.
     * @param {boolean} [showAll] Show all known vulnerabilities, regardless of number of affected systems.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1VulnerabilitiesCvesGet(filter?: string, limit?: number, offset?: number, page?: number, pageSize?: number, sort?: string, showAll?: boolean, options?: any) {
        return DefaultApiFp(this.configuration).v1VulnerabilitiesCvesGet(filter, limit, offset, page, pageSize, sort, showAll, options)(this.axios, this.basePath);
    }

}

